    case 2:
    {
    /*Return to home - 
      First lets look at home
    */
      if( elapsed_time >= 25 )
      {
        float right_output = 0.0;
        float left_output = 0.0;
        float alpha = acos((Romi.getPose().x*cos(Romi.getPose().theta) + Romi.getPose().y*sin(Romi.getPose().theta))/sqrt(square(Romi.getPose().x) + square(Romi.getPose().y)));
        float home_heading = ((Romi.getPose().theta>=0 && Romi.getPose().theta<=M_PI)  || (Romi.getPose().theta<=-M_PI && Romi.getPose().theta<=0) ) ? M_PI - alpha : alpha - M_PI;
//        float ang_vel = max(min((home_heading- Romi.getPose().theta)/(0.025), max_ang_vel), -max_ang_vel);
        if(!direction_chosen)
        {
          direction_chosen = true;
          current_rotation = (home_heading >=0.0) ? 1.0:-1.0;
        }
        float head_tol = M_PI/180.0;
        last_timestamp = millis();   
        count++;
        
        if(count%2==0)
        {
          count = 0;
          if(home_heading > head_tol || home_heading < -head_tol)
          {
              float right_wheel_speed, left_wheel_speed;
              Romi.robotVelToWheelVels(0.0, 0.25*(current_rotation)*max_ang_vel, left_wheel_speed, right_wheel_speed);
              // Don't Actually need the PID xD just want the romi to turn until it sees the heding
              right_output = right_wheel_speed;
              left_output = left_wheel_speed;             
              if(left_output < 0)
              {
                l_direction = REVERSE;  
              }
              else
              {
                l_direction = FORWARD;
              }
                
              if(right_output < 0)
              {
                r_direction = REVERSE;  
              }
              else
              {
                r_direction = FORWARD;
              }
          }
          else
          {
              stateCleanup();
              state = 4;
              break;
          }
        }
        l_power = min(max(abs((left_output - y_int)/slope), min_power-3), max_power);
        r_power = min(max(abs((right_output - y_int)/slope), min_power-3), max_power);
      }
    }
    break;
    /*TODO: Re=implement this entire logic once Iv'e tested the rotation state*/
    case 3:
    {
      if( elapsed_time >= 50)
      {
        float right_output = 0.0;
        float left_output = 0.0;
        float alpha = acos((Romi.getPose().x*cos(Romi.getPose().theta) + Romi.getPose().y*sin(Romi.getPose().theta))/sqrt(square(Romi.getPose().x) + square(Romi.getPose().y)));
        float abs_distance = sqrt(square(Romi.getPose().x) + square(Romi.getPose().y));
        float home_heading = ((Romi.getPose().theta>=0 && Romi.getPose().theta<=M_PI)  || (Romi.getPose().theta<=-M_PI && Romi.getPose().theta<=0) ) ? M_PI - alpha : alpha - M_PI;
        float ang_vel = rth_heading.update(0.0, home_heading);
//        float lin_vel = 0.05;
        if( !isClose  && abs_distance < 0.2)
        {
          // Re-orient when we are close
          isClose = true;
          stateCleanup();
          state = 2;
          break;
        }
        
        last_timestamp = millis();    
        count++;
        if(count%2==0)
        {
          float right_wheel_speed, left_wheel_speed;
          // BAng Bang RTH could do some cleaner logic but a working thing right right now
          if(ang_vel>0.125 && !isClose)
          {
            Romi.robotVelToWheelVels(max_linear_vel, max_ang_vel, left_wheel_speed, right_wheel_speed);
          }
          else if(ang_vel<-0.125 && !isClose)
          {
            Romi.robotVelToWheelVels(max_linear_vel,-max_ang_vel, left_wheel_speed, right_wheel_speed);
          }
          else
          {
            Romi.robotVelToWheelVels(max_linear_vel, 0.0, left_wheel_speed, right_wheel_speed);
          }
//          right_output = right_wheel.update(right_wheel_speed, right_wheel_est);
//          left_output = left_wheel.update(left_wheel_speed, left_wheel_est);
          right_output = right_wheel_speed;
          left_output = left_wheel_speed;
          count = 0;
          if(abs_distance > 0.01 && Romi.getPose().x >= 0)
          {
              if(left_output < 0)
              {
                l_direction = REVERSE;  
              }
              else
              {
                l_direction = FORWARD;
              }
                
              if(right_output < 0)
              {
                r_direction = REVERSE;  
              }
              else
              {
                r_direction = FORWARD;
              }
          }
          else
          {
              stateCleanup();
              state = 4;
              break;
          }
        }
        l_power = min(max(abs((left_output - y_int)/slope), min_power), max_power);
        r_power = min(max(abs((right_output - y_int)/slope), min_power), max_power);
      }
    }
    break;

/*Test states Put them as needed back into the original code*/
////   Debug state!!!!!
//  case -1:
//  float left_output = left_wheel.update(max_des_speed-0.5, left_wheel_est);
//  float right_output = right_wheel.update(0.0, right_wheel_est);
////  Serial.print(left_output);
////  Serial.print(",");
//
//  l_power = abs((left_output - y_int)/slope);
//  r_power = abs((right_output - y_int)/slope);
//
//  if(left_output < 0)
//  {
//    l_direction = REVERSE;  
//  }
//  else
//  {
//    l_direction = FORWARD;
//  }
//    
//  if(right_output < 0)
//  {
//    r_direction = REVERSE;  
//  }
//  else
//  {
//    r_direction = FORWARD;
//  }
//  delay(50);
//  break;

/* Original BangBang Controller*/
//  case -2:
//      m = weightedPower(l_sensor, c_sensor, r_sensor, min_power, max_power,l_power, r_power);
//
//      if(m >0.15)
//      {
//        r_direction = FORWARD;
//        l_direction = REVERSE;
//      }
//      else if(m < -0.15)
//      {
//        r_direction = REVERSE;
//        l_direction = FORWARD;
//      }
//      else
//      {
//        r_direction = FORWARD;
//        l_direction = FORWARD;
//      }
//
//
//    l_power = max(min(l_power, max_power),min_power);
//    r_power = max(min(r_power, max_power),min_power);
//    break;

    
//    case -3:
//    {
//    /*Drive forward a bit so we can figure out if the kinematics are working alright*/
//      if(elapsed_time >=500 && count < 8)
//      {
//        l_power = random(0,50);
//        r_power = random(0,50);
//        count++;
//        last_timestamp = millis();
//      }
//      else if(elapsed_time >=500 && count >= 8)
//      {
//        l_power = 0;
//        r_power = 0; 
//        state = 2;
//      }
//      break;
//    }

//    case -3:
//    {
//    /*Drive forward a bit so we can figure out if the kinematics are working alright*/
//      if(elapsed_time >=500 && count < 8)
//      {
//        l_power = random(0,50);
//        r_power = random(0,50);
////        l_power = 25;
////        r_power = 25;
//        count++;
//        last_timestamp = millis();
//      }
//      else if(elapsed_time >=500 && count >= 8)
//      {
//        stateCleanup();
//        state = 2;
//      }
//      break;
//    }
/*Original directed wheel control*/
//case 1:
//{
//  m = weightedPower(l_sensor, c_sensor, r_sensor, min_power, max_power);
//  if( elapsed_time >= 10) 
//  {
//    float heading_output = 0.0;
//    float right_output = 0.0;
//    float left_output = 0.0;
//    last_timestamp = millis();    
//    heading_output = heading.update(0.0, m);
//    count++;
//    if(count%2==0)
//    {
////        right_output = right_wheel.update(heading_output*(max_des_speed), right_wheel_est);
////        left_output = left_wheel.update(-heading_output*(max_des_speed), left_wheel_est);
//      left_output= -heading_output*(max_des_speed);
//      right_output = heading_output*(max_des_speed);
//      count = 0;
//      if(heading_output >0.35)
//      {
//        r_direction = FORWARD;
//        l_direction = REVERSE;
//        left_output = 0.5*left_output;
//      }
//      else if(heading_output < -0.35)
//      {
//        r_direction = REVERSE;
//        l_direction = FORWARD;
//        right_output = 0.5*right_output;
//      }
//      else
//      {
//        r_direction = FORWARD;
//        l_direction = FORWARD;
//        right_output = map(confidence, -1.0, 1.0, 0.0, 1.0)*max_des_speed/2.0;
//        left_output= map(confidence, -1.0, 1.0, 0.0, 1.0)*max_des_speed/2.0;
//      }
//      if(abs((left_output - y_int)/slope) > max_power)
//      {
//        l_power = (byte) max_power;
//      }
//      else 
//      {
//        l_power = (byte)abs((left_output - y_int)/slope);
//      }
//
//      if(abs((right_output - y_int)/slope)> max_power)
//      {
//        r_power = (byte) max_power;
//      }
//      else
//      {
//        r_power = (byte)abs((right_output - y_int)/slope);
//      }
//    }
//
//  }    
//  if(confidence <=-1.0)
//  {
//    l_power = 0;
//    r_power = 0;
//    if(shouldBeep)
//    {
//      shouldBeep = false;
//      beep_timestamp = millis();
//      analogWrite(6,200);
//      digitalWrite(13, HIGH);
//      beep_time = 0;  
//    }
//    if(beep_time >=2000)
//    {
//      analogWrite(6,0);
//      digitalWrite(13, LOW);    
//      stateCleanup();
//      state = 4;
//      break;  
//    } 
//  }
//  }
//  break;
//
//  case 1:
//  {
//  /*rotate a bit to align*/
//    float m = weightedPower(l_sensor, c_sensor, r_sensor, min_power, max_power);
//    if( elapsed_time >= 25) 
//    {
//      float heading_output = 0.0;
//      float right_output = 0.0;
//      float left_output = 0.0;
//      last_timestamp = millis();    
//      heading_output = heading.update(0.0, m);
//      count++;
//      right_output = 0.5*max_des_speed;
//      left_output = 0.5*max_des_speed;
//      if(count%2==0)
//      {
//        count = 0;
//        if(m > 0.0)
//        {
//          r_direction = FORWARD;
//          l_direction = REVERSE;
//        }
//        else if(m < 0.0)
//        {
//          r_direction = REVERSE;
//          l_direction = FORWARD;
//        }
//        if(abs((left_output - y_int)/slope) > max_power)
//        {
//          l_power = (byte) max_power;
//        }
//        else 
//        {
//          l_power = (byte)abs((left_output - y_int)/slope);
//        }
//  
//        if(abs((right_output - y_int)/slope)> max_power)
//        {
//          r_power = (byte) max_power;
//        }
//        else
//        {
//          r_power = (byte)abs((right_output - y_int)/slope);
//        }
//      }
//    }    
//    if(m >= 0.05 || m <= -0.05)
//    {
//      l_power = 0;
//      r_power = 0;
//      if(shouldBeep)
//      {
//        shouldBeep = false;
//        beep_timestamp = millis();
////        analogWrite(6,100);
//        digitalWrite(13, HIGH);
//        beep_time = 0;  
//      }
//      if(beep_time >=1000)
//      {
////        analogWrite(6,0);
//        digitalWrite(13, LOW);    
//        stateCleanup();
//        state = 5;
//        break;  
//      } 
//    }
//  }
//  break;

//Now that we have the sensor lets try to find the line
//
//  case -4:
//  {
//      if(elapsed_time >=2000)
//      {
//        count++;
//        l_power = 0.0;
//        l_direction = REVERSE;
////        r_direction = FORWARD;
//        last_timestamp = millis();    
//      }
//      if(beep_time >=100)
//      {
//        float r_speed = (count%2 ==0) ? M_PI : -M_PI;
//        float right_output = right_wheel.update(r_speed, right_wheel_est);
//
//        r_direction = (right_output >= 0)? FORWARD: REVERSE;
//        
//        r_power = (byte)abs((right_output - y_int)/slope); //~2.20
//        Serial.print(right_wheel_est);
//        Serial.print(",");
//        Serial.print(r_speed);
//        Serial.print(",");
//        Serial.println(right_wheel_vel);
//      }
//  }
//  break;
